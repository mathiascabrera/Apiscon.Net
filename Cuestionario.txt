1 - ¿Cuál es el concepto que utiliza internamente el template de API de .NET para su funcionamiento?.

El concepto que utiliza internamente el template de API de .NET para su funcionamiento es el patrón de REST.



2 - Mencione los 4 aspectos vistos de las arquitecturas dentro de las APIs.

Los 4 aspectos vistos de las arquitecturas dentro de las APIs son los siguientes:

- Logging.
- Inyección de Dependencia.
- Swagger.
- Middleware.



3 - Observe los 4 aspectos mencionados en el ítem anterior: ¿Cuál de todos ellos son las bases del funcionamiento de las APIs con .NET?.

Los Middlewares son las bases del funcionamiento de las APIs con .NET.



4 - ¿Qué es Entity Framework y para qué la hemos utilizado?.

Entity Framework es una librería. La hemos utilizado para conectarnos a una Base de Datos.



5 - ¿Qué significan las siglas API?.

Las siglas API significan "Application Programming Interface".



6 - ¿Cómo podrías describir qué es una API?.

Una API es una aplicación que nos permite crear una capa de abstracción o una Interface entre una aplicación y otra.

Una API es un proveedor de métodos y funciones hacia otras aplicaciones.

Encapsulamos una determinada lógica dentro de una aplicación que será consumida por otra. Esta otra aplicación deberá pasar a través de una capa de abstracción para poder realizar este consumo.

Esta capa de abstracción nos permite que la API pueda ser consumida por cualquier otro tipo de cliente, incluso si no está desarrollado en el mismo lenguaje de programación o con la misma tecnología.



7 - ¿Cuál es la característica o funcionalidad de las APIs, que según lo visto, es lo más resaltante y que a su vez es el motivo por el cual se utiliza en gran medida en las Industrias de Desarrollo de Software?.

Lo más resaltante de una API, según lo visto, es su capacidad de ser consumida por cualquier tipo de cliente, incluso si no está desarrollado en el mismo lenguaje de programación.



8 - Según lo visto: ¿Cuáles son las capas adicionales que pueden poseer las APIs?.

Según lo visto, las APIs pueden poseer capas adicionales de Seguridad, Autorización y Autenticación que nos permiten determinar qué pueden ver los usarios y qué pueden ejecutar cuando estén consumiendo la API.



9 - ¿Qué podría ser el Cliente en una Arquitectura común en una aplicación Cliente-Servidor?.

El Cliente en una Arquitectura Cliente-Servidor, podría ser una aplicación web creada en REACT/ANGULAR, o también podría ser una App que puede ser desarrollada en Flutter o Xamarin, como así también podría ser una Aplicación de Escritorio.



10 - ¿Una API puede consumir otras APIs?.

Sí, una API puede consumir otras APIs.



11 - De ejemplos de APIs.

Un ejemplo podría ser la del "Almacenamiento de Archivos", como lo es la de Azure o AWS.
Esta API nos permite guardar archivos de textos, documentos, imágenes, videos, etc. La API es la que se va a encargar de realizar esta comunicación.

Otro ejemplo es la de consumir "Servicios de Pagos", como por ejemplo la de PayPal o Stripe.
Esta API nos permite manejar los pagos y consumos que esté generando el Usuario dentro de la aplicación.

También podríamos realizar una "Autenticación" de la API utilizando otras APIs de otros proveedores como podrían ser la API de Facebook y la API de Google.
Es bastante común en aplicaciones modernas que podamos usar nuestra cuenta de Google o de Facebook o de otras cuentas, para realizar el proceso de autenticación dentro de una aplicación.



11 - ¿Qué significan las siglas REST?.

Las siglas REST proviene de "Representational state transfer", y traducido es “transferencia de representación de estado”.


Para mayor información :
https://desarrolloweb.com/articulos/que-es-rest-caracteristicas-sistemas.html



12 - Mencione las características dadas del patrón REST.

- Estilo de arquitectura para el diseño de interfaces web.

- Permite el manejo de recursos desde el lado del servidor.

- Contiene las siguientes propiedades:
 ° Rendimiento
 ° Escalabilidad 
 ° Simplicidad
 ° Confiabilidad



13 - Las APIs REST: ¿Deben ser descargadas en nuestro ordenador?.

Tanto las APIs como REST no son tecnologías que debamos descargar en nuestro ordenador. Éstas son solo conceptos teóricos que debemos aplicar al momento en el que estemos escribiendo o estructurando nuestro proyecto.



14 - Mencione si las siguientes afirmaciones son verdaderas o falsas (en caso de ser falsa justifique su elección):

"El Patrón REST se aplica a la mayoría de APIs que se construyen actualmente".

RESPUESTA : VERDADERO.



"Una de las reglas de REST es utilizar verbos al momento de realizar un llamado HTTP para indicar a la API cuál es la acción que necesitamos ejecutar".

RESPUESTA : VERDADERO.



"Utilizamos PUT para realizar modificaciones parciales en un recurso"

RESPUESTA : FALSO.

JUSTIFICACIÓN : Utilizamos el método PUT para realizar modificaciones totales, no parciales. Para las modificaciones parciales se utiliza el verbo PATCH.



"Los servicios web API REST son capaces de realizar las operaciones típicas de un CRUD".

RESPUESTA : VERDADERO.



"Una de las reglas de REST es manejar una URL por cada recurso que tengamos en la base de datos." 

RESPUESTA : VERDADERO.



15 - Mencione los HTTP Verbs.

Los HTTP Verbs son los siguientes:

- GET    = Permite Obtener y leer recursos/datos.

- POST   = Permite la Inserción de recursos/datos.

- PUT    = Permite realizar modificaciones. Actualiza un registro.

- PATCH  = Permite realizar modificaciones parciales en un registro.

- DELETE = Permite eliminar un recurso dado.



16 - La URL de un recurso: ¿Qué nos permite?. ¿Puede ser dinámica la URL?. ¿Se utiliza la misma URL para ejecutar los métodos HTTP?.

La URL de un recurso nos permite realizar acciones que deseemos con el recurso en cuestión.

La URL de un recurso no puede ser dinámica, no puede cambiar, y además debe indicar cuál es el recurso al que estamos accediendo. 

Sí, se utiliza la misma URL para ejecutar cada uno de los HTTP Verbs.



17 - Mencione las Respuestas HTTP vistas.

Las respuestas Http vistas son las siguientes :

- Respuestas Informátivas (100 - 199).

- Respuestas Satisfactorias (200 - 299).

- Redirecciones (300 - 399).

- Errores de los clientes (400 - 499).

- Errores de los servidores (500 - 599).



18 - Según lo aprendido: ¿Cuáles son las respuestas HTTP más utilizadas?.

Las respuestas HTTP más utilizadas son las siguientes:

- 500  Internal Error.

- 200  Ok (código exitoso).

- 404  Not found (recurso no encontrado).

- 201  Created (recurso creado).

- 204  No content (no hay contenido retornado).



19 - ¿Qué sucede al ejecutar el comando dotnet new?.

El comando dotnet new crea un proyecto de .NET basado en una plantilla.



20 - ¿Qué sucede al ejecutar el comando dotnet new --list?.

El comando dotnet new --list nos permite visualizar el listado de todas las planillas.



21 - Según lo visto, ¿Cuál es el template clásico y el más completo?.

Según lo visto, el template clásico y el más completo es el "WebAPI".



22 - ¿Qué sucede al ejecutar el comando dotnet new webapi?.

Al ejecutar el comando dotnet new webapi API permite la creación de la plantilla web de ASP.NET Core.



23 - Se desea abrir, desde la consola, un proyecto en VSCode: ¿Qué comando permite realizar esta acción?.

El comando que permite abrir un proyecto en VSCode, desde la consola, es "code".
